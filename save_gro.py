#!/usr/bin/env python3
"""Extend pymol save command to save gro files"""
from pymol import cmd
from pathlib import Path


class Atom:
    def __init__(self, atom):
        self.resi = int(atom.resi)
        self.resn = atom.resn
        self.name = atom.name
        self.idx = int(atom.index)
        # coordinates are in angstrom
        self.x, self.y, self.z = [float(p) for p in atom.coord]

    def __str__(self):
        """
        Return atom in gro format
        :return: str
        """
        fmt  = "\n"
        fmt += str(self.resi).rjust(5)
        fmt += str(self.resn).ljust(5)
        fmt += str(self.name).rjust(5)
        fmt += str(self.idx).rjust(5)
        fmt += f"{self.x/10:.3f}".rjust(8)
        fmt += f"{self.y/10:.3f}".rjust(8)
        fmt += f"{self.z/10:.3f}".rjust(8)
        return fmt


def parse_cryst(symmetry):
    # Units are in angstrom
    x, y, z, *_ = symmetry
    fmt  = "\n"
    fmt += f"{x/10:4.5f}".rjust(10)
    fmt += f"{y/10:4.5f}".rjust(10)
    fmt += f"{z/10:4.5f}".rjust(10)
    return fmt


class Structure:
    def __init__(self):
        self.atoms = []

    @classmethod
    def from_model(cls, model):
        structure = cls()
        for at in model.atom:
            structure.atoms.append(Atom(at))
        return structure

    def to_str(self):
        for atom in self.atoms:
            yield str(atom)


@cmd.extend
def save(filename: str, selection='(all)', state=-1, format='',
         ref_state=-1, quiet=1, partial=0, *, _self=cmd, **kwargs):
    """DESCRIPTION
    "save" writes content to a file.
    Extended to save gro files.

    USAGE
        save filename [, selection [, state [, format ]]]
    ARGUMENTS
        filename = string: file path to be written
        selection = string: atoms to save {default: (all)}
        state = integer: state to save {default: -1 (current state)}

    PYMOL API
        cmd.save(string file, string selection, int state, string format)
    NOTES
        The file format is automatically chosen if the extension is one of
        the supported output formats: gro, pdb, pqr, mol, sdf, pkl, pkla, mmd, out,
        dat, mmod, cif, pov, png, pse, psw, aln, fasta, obj, mtl, wrl, dae, idtf,
        or mol2.
        If the file format is not recognized, then a PDB file is written
        by default.
        For molecular files and where applicable and supported:

        * if state = -1 (default), then only the current state is written.
        * if state = 0, then a multi-state output file is written.

    SEE ALSO
        load, get_model

    """
    if Path(filename).suffix != ".gro":
        # Fall back to api save
        _locals = locals()
        _locals.pop('kwargs')
        return cmd.save(**_locals, **kwargs)

    model = cmd.get_model(selection)
    structure = Structure.from_model(model)
    atoms = structure.to_str()
    box = parse_cryst(cmd.get_symmetry())
    natoms = f"\n{len(structure.atoms)}"

    with open(filename, 'w') as f:
        f.write("GRO file generated by PyMOL")
        f.write(natoms)
        f.writelines(atoms)
        f.write(box)

    if quiet == 0:
        print(f' Save: wrote "{filename}".')
